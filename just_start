import pygame
import sys
import os

pygame.init()
# размеры окна:
tile_width = tile_height = 50
size = width, height = tile_width * 11, tile_height * 11
# screen — холст, на котором нужно рисовать:
screen = pygame.display.set_mode(size)
clock = pygame.time.Clock()


def load_level(filename):
    filename = "data/" + filename
    # читаем уровень, убирая символы перевода строки
    with open(filename, 'r') as mapFile:
        level_map = [line.strip() for line in mapFile]

    # и подсчитываем максимальную длину
    max_width = max(map(len, level_map))

    # дополняем каждую строку пустыми клетками ('.')
    return list(map(lambda x: x.ljust(max_width, '.'), level_map))


def load_image(name, colorkey=None):
    fullname = os.path.join('data', name)
    # если файл не существует, то выходим
    if not os.path.isfile(fullname):
        print(f"Файл с изображением '{fullname}' не найден")
        sys.exit()
    image = pygame.image.load(fullname)
    return image


tile_images = {
    'wall': load_image('box.png'),
    'empty': load_image('grass.png')
}
player_image = load_image('mario.png')


class Tile(pygame.sprite.Sprite):
    def __init__(self, tile_type, pos_x, pos_y):
        super().__init__(tiles_group, all_sprites)
        self.image = tile_images[tile_type]
        self.rect = self.image.get_rect().move(
            tile_width * pos_x, tile_height * pos_y)


class Grass(pygame.sprite.Sprite):
    def __init__(self, tile_type, pos_x, pos_y):
        super().__init__(all_sprites)
        self.image = tile_images[tile_type]
        self.rect = self.image.get_rect().move(
            tile_width * pos_x, tile_height * pos_y)


class Player(pygame.sprite.Sprite):
    def __init__(self, pos_x, pos_y):
        super().__init__(player_group, all_sprites)
        self.image = player_image
        self.rect = self.image.get_rect().move(
            tile_width * pos_x + 15, tile_height * pos_y + 5)
        self.pos = pos_x, pos_y

    def update(self, x, y):
        old_x, old_y = self.pos
        self.rect = self.image.get_rect().move(
            tile_width * x + 15, tile_height * y + 5)
        if pygame.sprite.spritecollideany(self, tiles_group):
            print('ag')
            self.rect = self.image.get_rect().move(
                tile_width * old_x + 15, tile_height * old_y + 5)
            return
        self.pos = x, y
        self.rect = self.image.get_rect().move(
            tile_width * x + 15, tile_height * y + 5)


    # def move(self, pos):
    #     print(self.rect.w, self.rect.h)
    #     x, y = self.pos
    #     if pos == 'left':
    #         x, y = x - 1, y
    #     elif pos == 'up':
    #         x, y = x, y - 1
    #     elif pos == 'down':
    #         x, y = x, y + 1
    #     elif pos == 'right':
    #         x, y = x + 1, y
    #     self.rect = self.image.get_rect().move(
    #         tile_width * x + 15, tile_height * y + 5)
    #     if pygame.sprite.spritecollideany(self, tiles_group):
    #         x, y = self.pos
    #         self.rect = self.image.get_rect().move(
    #             tile_width * x + 15, tile_height * y + 5)
    #         return
    #     self.pos = x, y
    #     self.rect = self.image.get_rect().move(
    #         tile_width * x + 15, tile_height * y + 5)


class Camera:
    # зададим начальный сдвиг камеры
    def __init__(self):
        self.dx = 0
        self.dy = 0

    # сдвинуть объект obj на смещение камеры
    def apply(self, obj):
        obj.rect.x += self.dx
        obj.rect.y += self.dy

    # позиционировать камеру на объекте target
    def update(self, x, y):
        self.dx = x * tile_width
        self.dy = y * tile_width


FPS = 50
# основной персонаж
player = None

all_sprites = pygame.sprite.Group()
tiles_group = pygame.sprite.Group()
player_group = pygame.sprite.Group()


def generate_level(level):
    new_player, x, y = None, None, None
    for y in range(len(level)):
        for x in range(len(level[y])):
            if level[y][x] == '.':
                Grass('empty', x, y)
            elif level[y][x] == '#':
                Tile('wall', x, y)
            elif level[y][x] == '@':
                Grass('empty', x, y)
                new_player = Player(x, y)
    # вернем игрока, а также размер поля в клетках
    return new_player, x, y


def terminate():
    pygame.quit()
    sys.exit()


def start_screen():
    intro_text = ["ЗАСТАВКА", "",
                  "Правила игры",
                  "Если в правилах несколько строк,",
                  "приходится выводить их построчно"]

    fon = pygame.transform.scale(load_image('fon.jpg'), (width, height))
    screen.blit(fon, (0, 0))
    font = pygame.font.Font(None, 30)
    text_coord = 50
    for line in intro_text:
        string_rendered = font.render(line, 1, pygame.Color('black'))
        intro_rect = string_rendered.get_rect()
        text_coord += 10
        intro_rect.top = text_coord
        intro_rect.x = 10
        text_coord += intro_rect.height
        screen.blit(string_rendered, intro_rect)

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                terminate()
            elif event.type == pygame.KEYDOWN or \
                    event.type == pygame.MOUSEBUTTONDOWN:
                return  # начинаем игру
        pygame.display.flip()
        clock.tick(FPS)


def game_main():
    player, level_x, level_y = generate_level(load_level('map.txt'))
    camera = Camera()
    x, y = player.pos
    player.update(x, y)
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                terminate()
            elif event.type == pygame.KEYDOWN:
                if event.type == pygame.KEYDOWN and event.key == pygame.K_d:
                    x += 1
                if event.type == pygame.KEYDOWN and event.key == pygame.K_a:
                    x -= 1
                if event.type == pygame.KEYDOWN and event.key == pygame.K_w:
                    y -= 1
                if event.type == pygame.KEYDOWN and event.key == pygame.K_s:
                    y += 1
                player.update(x, y)
                screen.fill((0, 0, 0))
                camera.update(x, y)
                # изменяем ракурс камеры
                # обновляем положение всех спрайтов
                # for sprite in all_sprites:
                #     camera.apply(sprite)
        all_sprites.draw(screen)
        player_group.draw(screen)
        tiles_group.draw(screen)
        pygame.display.flip()
        clock.tick(FPS)


# start_screen()
game_main()
